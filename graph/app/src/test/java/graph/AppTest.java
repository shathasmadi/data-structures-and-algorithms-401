/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;


import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");



//        Node can be successfully added to the graph
        Graph<String> test = new Graph<>();
        Vertex<String> vertex = test.addNode("A");

        assertTrue(test.map.containsKey(vertex));



//        An edge can be successfully added to the graph
        Vertex<String> vertexTwo = test.addNode("B");
        test.addEdge(vertex,vertexTwo);

        assertEquals(vertexTwo , test.getNeighbors(vertex).get(0));




//        A collection of all nodes can be properly retrieved from the graph
        ArrayList<Vertex<String>> finalResult = new ArrayList<>();
        finalResult.add(vertex);
        finalResult.add(vertexTwo);
        assertEquals(finalResult, test.getNodes());




//        All appropriate neighbors can be retrieved from the graph
        List<Vertex<String>> resultTwo = new ArrayList<>();
        resultTwo.add(vertexTwo);
        assertEquals(resultTwo , test.getNeighbors(vertex));




//        The proper size is returned, representing the number of nodes in the graph
        assertEquals(2,test.getSize());



//        A graph with only one node and edge can be properly returned
        Graph<String> oneNodeGraph = new Graph<>();
        Vertex<String> vertexThree = oneNodeGraph.addNode("A");

        ArrayList<Vertex<String>> resultThree = new ArrayList<>();
        resultThree.add(vertexThree);
        assertEquals(resultThree, oneNodeGraph.getNodes());



//        An empty graph properly returns null
        Graph<String> emptyGraph = new Graph<>();
        assertNull(emptyGraph.getNodes());
























    }
}
