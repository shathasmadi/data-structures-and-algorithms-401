/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");



        //Can successfully instantiate an empty linked list

        LinkedList linkedTest = new LinkedList();
        assertNull(linkedTest.head);

        // Can properly insert into the linked list

        linkedTest.insertNode(5);
        assertEquals(5,linkedTest.head.value);

        //The head property will properly point to the first node in the linked list

        assertEquals(5,linkedTest.head.value);
        assertNull(linkedTest.head.next);

        // Can properly insert multiple nodes into the linked list
         linkedTest.insertNode(5);
         linkedTest.insertNode(2);

         assertEquals(2,linkedTest.head.value);

         //Will return true when finding a value within the linked list that exists

        linkedTest.insertNode(5);
        linkedTest.insertNode(2);
        assertTrue(linkedTest.includes(2));



        //Will return false when searching for a value in the linked list that does not exist
        linkedTest.insertNode(5);
        linkedTest.insertNode(2);
        assertFalse(linkedTest.includes(7));

//        System.out.print(linkedTest.toString());

        //Can properly return a collection of all the values that exist in the linked list
        linkedTest.insertNode(3);
        linkedTest.insertNode(4);
        assertEquals("{ 4 } -> { 3 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 5 } -> NULL",linkedTest.toString());


        // solve lab 6 code challenge 6 : linked-list-insertions


        //Can successfully add a node to the end of the linked list

        linkedTest.append(8);
        assertEquals("{ 4 } -> { 3 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 5 } -> { 8 } -> NULL",linkedTest.toString());


        //Can successfully add multiple nodes to the end of a linked list

        linkedTest.append(9);
        linkedTest.append(10);
        assertEquals("{ 4 } -> { 3 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 5 } -> { 8 } -> { 9 } -> { 10 } -> NULL",linkedTest.toString());


        //Can successfully insert a node before a node located i the middle of a linked list

        linkedTest.insertBefore(5,20);
        assertEquals("{ 4 } -> { 3 } -> { 2 } -> { 20 } -> { 5 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 5 } -> { 8 } -> { 9 } -> { 10 } -> NULL",linkedTest.toString());


       //Can successfully insert a node before the first node of a linked list

        linkedTest.insertBefore(4,19);
        assertEquals("{ 19 } -> { 4 } -> { 3 } -> { 2 } -> { 20 } -> { 5 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 5 } -> { 8 } -> { 9 } -> { 10 } -> NULL",linkedTest.toString());


        //Can successfully insert after a node in the middle of the linked list

        linkedTest.insertAfter(20,15);
        assertEquals("{ 19 } -> { 4 } -> { 3 } -> { 2 } -> { 20 } -> { 15 } -> { 5 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 5 } -> { 8 } -> { 9 } -> { 10 } -> NULL",linkedTest.toString());


        //Can successfully insert a node after the last node of the linked list

        linkedTest.insertAfter(10,14);
        assertEquals("{ 19 } -> { 4 } -> { 3 } -> { 2 } -> { 20 } -> { 15 } -> { 5 } -> { 2 } -> { 5 } -> { 2 } -> { 5 } -> { 5 } -> { 8 } -> { 9 } -> { 10 } -> { 14 } -> NULL",linkedTest.toString());

    }


}
